def idea_encrypt(key, plaintext):
    def mul(a, b):
        if a == 0:
            a = 0x10001 - b
        elif b == 0:
            a = 0x10001 - a
        else:
            t = a * b
            b = t & 0xFFFF
            a = (t >> 16) & 0xFFFF
            a = (a - b) + (1 if a < b else 0)
        return a & 0xFFFF

    def key_schedule(key):
        key = key + b'\x00' * (16 - len(key))
        key_words = [int.from_bytes(key[i:i + 2], 'big') for i in range(0, 16, 2)]
        for i in range(8, 52):
            if i % 8 == 0:
                key_words = key_words[1:] + [key_words[0]]
            elif i % 8 == 6:
                key_words = key_words[:4] + key_words[5:] + [key_words[4]]
            elif i % 8 == 7:
                key_words = key_words[3:] + key_words[:3]
            key_words.append((key_words[-8] ^ key_words[-5] ^ key_words[-3] ^ key_words[-1] ^ 0x9E37) & 0xFFFF)
        return key_words

    key_words = key_schedule(key)
    plaintext = plaintext + b'\x00' * (-len(plaintext) % 16)
    ciphertext = bytearray()
    for i in range(0, len(plaintext), 16):
        x = int.from_bytes(plaintext[i:i + 2], 'big')
        y = int.from_bytes(plaintext[i + 2:i + 4], 'big')
        z = int.from_bytes(plaintext[i + 4:i + 6], 'big')
        w = int.from_bytes(plaintext[i + 6:i + 8], 'big')
        for j in range(8):
            x = mul(x, key_words[j * 6])
            y = (y + key_words[j * 6 + 1]) & 0xFFFF
            z = (z + key_words[j * 6 + 2]) & 0xFFFF
            w = mul(w, key_words[j * 6 + 3])
            t = mul(y ^ z, key_words[j * 6 + 4])
            u = (t + mul(0xFFFF - x, key_words[j * 6 + 5])) & 0xFFFF
            v = (t + u) & 0xFFFF
            x = x ^ v
            y = y ^ u
            z = z ^ v
            w = w ^ u
            y, z = z, y
        x = mul(x, key_words[48])
        y = (y + key_words[49]) & 0xFFFF
        z = (z + key_words[50]) & 0xFFFF
        w = mul(w, key_words[51])
        ciphertext += x.to_bytes(2, 'big') + y.to_bytes(2, 'big') + z.to_bytes(2, 'big') + w.to_bytes(2, 'big')
    return ciphertext
def idea_decrypt(key, ciphertext):
    def mul(a, b):
        if a == 0:
            a = 0x10001 - b
        elif b == 0:
            a = 0x10001 - a
        else:
            t = a * b
            b = t & 0xFFFF
            a = (t >> 16) & 0xFFFF
            a = (a - b) + (1 if a < b else 0)
        return a & 0xFFFF

    def key_schedule(key):
        key = key + b'\x00' * (16 - len(key))
        key_words = [int.from_bytes(key[i:i+2], 'big') for i in range(0, 16, 2)]
        for i in range(8, 52):
            if i % 8 == 0:
                key_words = key_words[1:] + [key_words[0]]
            elif i % 8 == 6:
                key_words = key_words[:4] + key_words[5:] + [key_words[4]]
            elif i % 8 == 7:
                key_words = key_words[3:] + key_words[:3]
            key_words.append((key_words[-8] ^ key_words[-5] ^ key_words[-3] ^ key_words[-1] ^ 0x9E37) & 0xFFFF)
        return key_words

    key_words = key_schedule(key)
    plaintext = bytearray()
    for i in range(0, len(ciphertext), 16):
        x = int.from_bytes(ciphertext[i:i+2], 'big')
        y = int.from_bytes(ciphertext[i+2:i+4], 'big')
        z = int.from_bytes(ciphertext[i+4:i+6], 'big')
        w = int.from_bytes(ciphertext[i+6:i+8], 'big')
        for j in range(8):
            x = mul(x, key_words[51-j*6])
            y = (y - key_words[50-j*6]) & 0xFFFF
            z = (z - key_words[49-j*6]) & 0xFFFF
            w = mul(w, key_words[48-j*6])
            t = mul(y ^ z, key_words[47-j*6])
            u = (t + mul(0xFFFF - x, key_words[46-j*6])) & 0xFFFF
            v = (t + u) & 0xFFFF
            x = x ^ v
            y = y ^ u
            z = z ^ v
            w = w ^ u
            y, z = z, y
        x = mul(x, key_words[0])
        y = (y - key_words[1]) & 0xFFFF
        z = (z - key_words[2]) & 0xFFFF
        w = mul(w, key_words[3])
        plaintext += x.to_bytes(2, 'big') + y.to_bytes(2, 'big') + z.to_bytes(2, 'big') + w.to_bytes(2, 'big')
    return plaintext.rstrip(b'\x00')





key = b'\x01\x23\x45\x67\x89\xAB\xCD\xEF\x01\x23\x45\x67\x89\xAB\xCD\xEF'
plaintext = b'Hello, world! This is a test message.'

# encrypt the plaintext
ciphertext = idea_encrypt(key, plaintext)
print("Ciphertext:", ciphertext.hex())

# decrypt the ciphertext using the same key
decrypted_text = idea_decrypt(ciphertext, key)
print("Decrypted plaintext:", decrypted_text.hex())
